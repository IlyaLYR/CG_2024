// private static void fillingOval2V(PixelWriter pixelWriter, int x0, int y0, int x, int y, int a, int b, Color[] colors, float[] interval) {
//        for (int i = x0 - x; i <= x0 + x; i++) {
//            double dist = Math.sqrt(Math.pow(i - x0, 2) + Math.pow(y, 2));
//            double max = (a * b) / Math.sqrt(a * a * Math.pow(y / dist, 2) + b * b * Math.pow((i - x0) / dist, 2));
//            double fraction = dist / max;
//            Color color = interpolateColor(colors[0], colors[1], (fraction / interval[0]));
//            for (int j = interval.length - 1; j > 0; j--) {
//                if (fraction > interval[j - 1] && fraction <= interval[j] + 0.02) {
//                    dist = fraction - interval[j - 1];
//                    max = interval[j] - interval[j - 1];
//                    fraction = dist / max;
//                    color = interpolateColor(colors[j - 1], colors[j], fraction);
//                }
//            }
//            pixelWriter.setColor(i, y0 + y, color);
//            pixelWriter.setColor(i, y0 - y, color);
//        }
//    }

 for (int i = x0 - x; i <= x0 + x; i++) {
//                double dist  = Math.sqrt(Math.pow(i - x0, 2) + Math.pow(y, 2));
//                double max = (a*b)/ Math.sqrt(a*a*Math.pow(y/dist, 2) + b*b*Math.pow((i-x0)/dist, 2));
//
//                Color color = interpolateColor(startColor, endColor, dist/max);
//                pixelWriter.setColor(i, y0 + y, color);
//                pixelWriter.setColor(i, y0 - y, color);
//            }
