@startuml
class ru.cs.vsu.cg.matrix.typesMatrix.Matrix2D {
+ <<Create>> Matrix2D(double[][])
+ <<Create>> Matrix2D(double[])
+ <<Create>> Matrix2D()
+ <<Create>> Matrix2D(boolean)
# Matrix2D newMatrix(SquareMatrix)
}
note top of ru.cs.vsu.cg.matrix.typesMatrix.Matrix2D

 * Класс для работы с матрицами размером 2x2.
 * <p>
 * Этот класс представляет собой матрицу размером 2x2. Он позволяет создавать матрицы с различными типами данных,
 * а также предоставляет методы для работы с ними.
 
end note

note left of ru.cs.vsu.cg.matrix.typesMatrix.Matrix2D::Matrix2D(double[][])

     * Конструктор для создания матрицы 2x2 из двумерного массива.
     *
     * @param base двумерный массив, представляющий значения матрицы 2x2.
     
end note
note right of ru.cs.vsu.cg.matrix.typesMatrix.Matrix2D::Matrix2D(double[])

     * Конструктор для создания матрицы 2x2 из одномерного массива.
     *
     * @param base одномерный массив, представляющий значения матрицы 2x2.
     
end note
note left of ru.cs.vsu.cg.matrix.typesMatrix.Matrix2D::Matrix2D()

     * Конструктор для создания нулевой матрицы 2x2.
     
end note
note right of ru.cs.vsu.cg.matrix.typesMatrix.Matrix2D::Matrix2D(boolean)

     * Конструктор для создания единичной матрицы 2x2.
     *
     * @param unit если true, создаётся единичная матрица, если false — нулевая.
     
end note
note left of ru.cs.vsu.cg.matrix.typesMatrix.Matrix2D::newMatrix(SquareMatrix)

     * Метод для создания нового объекта Matrix2D на основе SquareMatrix.
     *
     * @param matrix квадратная матрица.
     * @return новый объект Matrix2D.
     
end note

abstract class ru.cs.vsu.cg.matrix.core.VectorWrapperR {
- VectorR vector
+ <<Create>> VectorWrapperR(int)
+ <<Create>> VectorWrapperR(int,double[])
+ double[] getBase()
+ int getRows()
+ int getCols()
# VectorR getVector()
# void setVector(VectorR)
+ double get(int,int)
+ void set(int,int,double)
+ {abstract}T newMatrix(VectorR)
+ void add(T)
+ T added(T)
+ void subtract(T)
+ T subtracted(T)
+ void multiply(double)
+ T multiplied(double)
+ void divide(double)
+ T divided(double)
+ double getLength()
+ T normalize()
+ void print()
+ String toString()
}
note top of ru.cs.vsu.cg.matrix.core.VectorWrapperR

 * Абстрактный класс-обертка для вектора-строки фиксированного размера.
 * <p>
 * Этот класс предоставляет методы для выполнения операций над векторами-строками, включая сложение, вычитание,
 * умножение на число, нормализацию и вычисление длины. Абстрактный метод `newMatrix` позволяет наследникам создавать
 * экземпляры конкретного типа вектора-строки.
 *
 * @param <T> конкретный класс, реализующий вектор-строку.
 
end note

note left of ru.cs.vsu.cg.matrix.core.VectorWrapperR::vector

     * Вектор-строка.
     
end note

note left of ru.cs.vsu.cg.matrix.core.VectorWrapperR::VectorWrapperR(int)

     * Конструктор для создания нулевого вектора-строки заданной размерности.
     *
     * @param n количество элементов вектора.
     
end note
note right of ru.cs.vsu.cg.matrix.core.VectorWrapperR::VectorWrapperR(int,double[])

     * Конструктор для создания вектора-строки с заданными элементами.
     *
     * @param n    количество элементов.
     * @param base массив элементов вектора.
     
end note
note left of ru.cs.vsu.cg.matrix.core.VectorWrapperR::getBase()

     * Получить массив элементов вектора.
     *
     * @return массив элементов.
     
end note
note right of ru.cs.vsu.cg.matrix.core.VectorWrapperR::getRows()

     * Получить количество строк в векторе.
     *
     * @return количество строк (всегда 1 для вектора-строки).
     
end note
note left of ru.cs.vsu.cg.matrix.core.VectorWrapperR::getCols()

     * Получить количество столбцов в векторе.
     *
     * @return количество столбцов.
     
end note
note right of ru.cs.vsu.cg.matrix.core.VectorWrapperR::getVector()

     * Получить внутренний объект вектора-строки.
     *
     * @return внутренний объект `VectorR`.
     
end note
note left of ru.cs.vsu.cg.matrix.core.VectorWrapperR::setVector(VectorR)

     * Установить внутренний объект вектора-строки.
     *
     * @param vector объект `VectorR`.
     
end note
note right of ru.cs.vsu.cg.matrix.core.VectorWrapperR::get(int,int)

     * Получить элемент вектора по индексу.
     *
     * @param row индекс строки (всегда 0 для вектора-строки).
     * @param col индекс столбца.
     * @return значение элемента.
     
end note
note left of ru.cs.vsu.cg.matrix.core.VectorWrapperR::set(int,int,double)

     * Установить элемент вектора по индексу.
     *
     * @param row   индекс строки (всегда 0 для вектора-строки).
     * @param col   индекс столбца.
     * @param value новое значение.
     
end note
note right of ru.cs.vsu.cg.matrix.core.VectorWrapperR::newMatrix(VectorR)

     * Создать новый экземпляр конкретного вектора-строки.
     *
     * @param vector внутренний объект `VectorR`.
     * @return новый экземпляр конкретного типа вектора.
     
end note
note left of ru.cs.vsu.cg.matrix.core.VectorWrapperR::add(T)

     * Сложить текущий вектор с другим.
     *
     * @param other вектор-строка для сложения.
     
end note
note right of ru.cs.vsu.cg.matrix.core.VectorWrapperR::added(T)

     * Создать новый вектор как сумму текущего и другого.
     *
     * @param other вектор-строка для сложения.
     * @return новый вектор-строка.
     
end note
note left of ru.cs.vsu.cg.matrix.core.VectorWrapperR::subtract(T)

     * Вычесть другой вектор из текущего.
     *
     * @param other вектор-строка для вычитания.
     
end note
note right of ru.cs.vsu.cg.matrix.core.VectorWrapperR::subtracted(T)

     * Создать новый вектор как разность текущего и другого.
     *
     * @param other вектор-строка для вычитания.
     * @return новый вектор-строка.
     
end note
note left of ru.cs.vsu.cg.matrix.core.VectorWrapperR::multiply(double)

     * Умножить текущий вектор на число.
     *
     * @param number множитель.
     
end note
note right of ru.cs.vsu.cg.matrix.core.VectorWrapperR::multiplied(double)

     * Создать новый вектор как результат умножения текущего на число.
     *
     * @param number множитель.
     * @return новый вектор-строка.
     
end note
note left of ru.cs.vsu.cg.matrix.core.VectorWrapperR::divide(double)

     * Разделить текущий вектор на число.
     *
     * @param number делитель.
     
end note
note right of ru.cs.vsu.cg.matrix.core.VectorWrapperR::divided(double)

     * Создать новый вектор как результат деления текущего на число.
     *
     * @param number делитель.
     * @return новый вектор-строка.
     
end note
note left of ru.cs.vsu.cg.matrix.core.VectorWrapperR::getLength()

     * Вычислить длину вектора.
     *
     * @return длина вектора.
     
end note
note right of ru.cs.vsu.cg.matrix.core.VectorWrapperR::normalize()

     * Нормализовать текущий вектор.
     *
     * @return новый нормализованный вектор-строка.
     
end note
note left of ru.cs.vsu.cg.matrix.core.VectorWrapperR::print()

     * Печать текущего вектора в консоль.
     
end note
note right of ru.cs.vsu.cg.matrix.core.VectorWrapperR::toString()

     * Представление текущего вектора в виде строки.
     *
     * @return строковое представление вектора.
     
end note

class ru.cs.vsu.cg.matrix.types.SquareMatrix {
+ <<Create>> SquareMatrix(int,double[])
+ <<Create>> SquareMatrix(int,double[][])
+ <<Create>> SquareMatrix(int)
+ <<Create>> SquareMatrix(int,boolean)
# <<Create>> SquareMatrix(Matrix)
+ void transpose()
+ SquareMatrix transposed()
+ void pow(int)
+ SquareMatrix pows(int)
+ void multiply(SquareMatrix)
+ SquareMatrix multiplied(SquareMatrix)
+ VectorC multiplied(VectorC)
+ RecMatrix multiplied(RecMatrix)
- void validateSquare(int,int)
# SquareMatrix newMatrix(Matrix)
}
note top of ru.cs.vsu.cg.matrix.types.SquareMatrix

 * Класс для работы с квадратными матрицами.
 * <p>
 * Квадратная матрица — это матрица, у которой количество строк равно количеству столбцов.
 * Этот класс предоставляет операции, такие как транспонирование, умножение, возведение в степень.
 
end note

note left of ru.cs.vsu.cg.matrix.types.SquareMatrix::SquareMatrix(int,double[])

     * Конструктор квадратной матрицы с элементами из одномерного массива.
     *
     * @param n    количество строк и столбцов.
     * @param base тело матрицы (одномерный массив).
     
end note
note right of ru.cs.vsu.cg.matrix.types.SquareMatrix::SquareMatrix(int,double[][])

     * Конструктор квадратной матрицы с элементами из двумерного массива.
     *
     * @param n    количество строк и столбцов.
     * @param base тело матрицы (двумерный массив).
     
end note
note left of ru.cs.vsu.cg.matrix.types.SquareMatrix::SquareMatrix(int)

     * Конструктор нулевой квадратной матрицы.
     *
     * @param n количество строк и столбцов.
     
end note
note right of ru.cs.vsu.cg.matrix.types.SquareMatrix::SquareMatrix(int,boolean)

     * Конструктор единичной квадратной матрицы.
     *
     * @param n    количество строк и столбцов.
     * @param unit если true, создается единичная матрица.
     
end note
note left of ru.cs.vsu.cg.matrix.types.SquareMatrix::SquareMatrix(Matrix)

     * Конструктор квадратной матрицы на основе общей матрицы.
     *
     * @param matrix общая матрица.
     * @throws IllegalArgumentException если переданная матрица не квадратная.
     
end note
note right of ru.cs.vsu.cg.matrix.types.SquareMatrix::transpose()

     * Транспонирует текущую матрицу.
     
end note
note left of ru.cs.vsu.cg.matrix.types.SquareMatrix::transposed()

     * Создает транспонированную копию текущей матрицы.
     *
     * @return новая транспонированная квадратная матрица.
     
end note
note right of ru.cs.vsu.cg.matrix.types.SquareMatrix::pow(int)

     * Возводит текущую матрицу в степень.
     *
     * @param n степень.
     
end note
note left of ru.cs.vsu.cg.matrix.types.SquareMatrix::pows(int)

     * Создает новую матрицу, возведенную в заданную степень.
     *
     * @param n степень.
     * @return новая квадратная матрица.
     
end note
note right of ru.cs.vsu.cg.matrix.types.SquareMatrix::multiply(SquareMatrix)

     * Умножает текущую матрицу на другую квадратную матрицу.
     *
     * @param matrix матрица-множитель.
     
end note
note left of ru.cs.vsu.cg.matrix.types.SquareMatrix::multiplied(SquareMatrix)

     * Создает новую матрицу как результат умножения текущей на другую квадратную матрицу.
     *
     * @param matrix матрица-множитель.
     * @return новая квадратная матрица.
     
end note
note right of ru.cs.vsu.cg.matrix.types.SquareMatrix::multiplied(VectorC)

     * Умножает текущую матрицу на вектор-столбец.
     *
     * @param vector вектор-множитель.
     * @return результат в виде нового вектора-столбца.
     
end note
note left of ru.cs.vsu.cg.matrix.types.SquareMatrix::multiplied(RecMatrix)

     * Умножает текущую матрицу на прямоугольную матрицу.
     *
     * @param matrix матрица-множитель.
     * @return новая прямоугольная матрица.
     
end note
note right of ru.cs.vsu.cg.matrix.types.SquareMatrix::validateSquare(int,int)

     * Проверяет, что матрица квадратная.
     *
     * @param row количество строк.
     * @param col количество столбцов.
     * @throws IllegalArgumentException если матрица не квадратная или является вектором.
     
end note
note left of ru.cs.vsu.cg.matrix.types.SquareMatrix::newMatrix(Matrix)

     * Создает новую квадратную матрицу на основе базовой матрицы.
     *
     * @param matrix базовая матрица.
     * @return новая квадратная матрица.
     
end note

class ru.cs.vsu.cg.matrix.types.RecMatrix {
+ <<Create>> RecMatrix(int,int)
# <<Create>> RecMatrix(Matrix)
+ <<Create>> RecMatrix(int,int,double[])
+ <<Create>> RecMatrix(int,int,double[][])
- void validateNonSquare(int,int)
+ void transpose()
+ RecMatrix transposed()
+ void multiply(RecMatrix)
+ RecMatrix multiplied(RecMatrix)
+ RecMatrix multiplied(SquareMatrix)
+ VectorC multiplied(VectorC)
# RecMatrix newMatrix(Matrix)
}
note top of ru.cs.vsu.cg.matrix.types.RecMatrix

 * Класс для работы с прямоугольными матрицами.
 * <p>
 * Прямоугольная матрица — это матрица, у которой количество строк не равно количеству столбцов.
 * Этот класс предоставляет базовые операции, такие как транспонирование, умножение и создание новых матриц.
 
end note

note left of ru.cs.vsu.cg.matrix.types.RecMatrix::RecMatrix(int,int)

     * Конструктор для создания нулевой прямоугольной матрицы заданных размеров.
     *
     * @param row количество строк.
     * @param col количество столбцов.
     * @throws IllegalArgumentException если размеры матрицы не соответствуют требованиям.
     
end note
note right of ru.cs.vsu.cg.matrix.types.RecMatrix::RecMatrix(Matrix)

     * Конструктор для создания прямоугольной матрицы на основе общей матрицы.
     *
     * @param matrix общая матрица.
     * @throws IllegalArgumentException если размеры матрицы не соответствуют требованиям.
     
end note
note left of ru.cs.vsu.cg.matrix.types.RecMatrix::RecMatrix(int,int,double[])

     * Конструктор для создания прямоугольной матрицы с элементами из одномерного массива.
     *
     * @param row  количество строк.
     * @param col  количество столбцов.
     * @param base массив элементов (одномерный).
     * @throws IllegalArgumentException если размеры матрицы не соответствуют требованиям.
     
end note
note right of ru.cs.vsu.cg.matrix.types.RecMatrix::RecMatrix(int,int,double[][])

     * Конструктор для создания прямоугольной матрицы с элементами из двумерного массива.
     *
     * @param row  количество строк.
     * @param col  количество столбцов.
     * @param base массив элементов (двумерный).
     * @throws IllegalArgumentException если размеры матрицы не соответствуют требованиям.
     
end note
note left of ru.cs.vsu.cg.matrix.types.RecMatrix::validateNonSquare(int,int)

     * Проверяет, что размеры матрицы соответствуют требованиям для прямоугольной матрицы.
     *
     * @param row количество строк.
     * @param col количество столбцов.
     * @throws IllegalArgumentException если матрица является вектором или квадратной.
     
end note
note right of ru.cs.vsu.cg.matrix.types.RecMatrix::transpose()

     * Транспонирует текущую матрицу.
     
end note
note left of ru.cs.vsu.cg.matrix.types.RecMatrix::transposed()

     * Создает транспонированную копию текущей матрицы.
     *
     * @return новая транспонированная прямоугольная матрица.
     
end note
note right of ru.cs.vsu.cg.matrix.types.RecMatrix::multiply(RecMatrix)

     * Перемножает текущую матрицу с другой прямоугольной матрицей.
     *
     * @param matrix другая прямоугольная матрица.
     
end note
note left of ru.cs.vsu.cg.matrix.types.RecMatrix::multiplied(RecMatrix)

     * Создает новую матрицу как результат умножения текущей на другую прямоугольную матрицу.
     *
     * @param matrix другая прямоугольная матрица.
     * @return новая прямоугольная матрица.
     
end note
note right of ru.cs.vsu.cg.matrix.types.RecMatrix::multiplied(SquareMatrix)

     * Умножает текущую матрицу на квадратную матрицу.
     *
     * @param matrix квадратная матрица.
     * @return новая прямоугольная матрица.
     
end note
note left of ru.cs.vsu.cg.matrix.types.RecMatrix::multiplied(VectorC)

     * Умножает текущую матрицу на вектор-столбец.
     *
     * @param vector вектор-столбец.
     * @return новый вектор-столбец.
     
end note
note right of ru.cs.vsu.cg.matrix.types.RecMatrix::newMatrix(Matrix)

     * Создает новую прямоугольную матрицу на основе базовой матрицы.
     *
     * @param matrix базовая матрица.
     * @return новая прямоугольная матрица.
     
end note

abstract class ru.cs.vsu.cg.matrix.core.VectorWrapperC {
- VectorC vector
+ <<Create>> VectorWrapperC(int)
+ <<Create>> VectorWrapperC(int,double[])
+ double[] getBase()
+ int getRows()
+ int getCols()
# VectorC getVector()
# void setVector(VectorC)
+ double get(int,int)
+ void set(int,int,double)
+ {abstract}T newMatrix(VectorC)
+ void add(T)
+ T added(T)
+ void subtract(T)
+ T subtracted(T)
+ void multiply(double)
+ T multiplied(double)
+ void divide(double)
+ T divided(double)
+ double getLength()
+ T normalize()
+ T crossProduct(T)
+ void print()
+ String toString()
}
note top of ru.cs.vsu.cg.matrix.core.VectorWrapperC

 * Абстрактный класс-обертка для вектора-столбца фиксированного размера.
 * <p>
 * Этот класс предоставляет методы для выполнения основных операций над векторами-столбцами, таких, как сложение, вычитание,
 * умножение на число, нормализация и вычисление длины. Абстрактный метод `newMatrix` позволяет наследникам создавать
 * новые экземпляры конкретного типа вектора-столбца.
 *
 * @param <T> конкретный класс, реализующий вектор-столбец.
 
end note

note left of ru.cs.vsu.cg.matrix.core.VectorWrapperC::vector

     * Вектор-столбец.
     
end note

note left of ru.cs.vsu.cg.matrix.core.VectorWrapperC::VectorWrapperC(int)

     * Конструктор для создания нулевого вектора-столбца заданной размерности.
     *
     * @param n количество элементов вектора.
     
end note
note right of ru.cs.vsu.cg.matrix.core.VectorWrapperC::VectorWrapperC(int,double[])

     * Конструктор для создания вектора-столбца с заданными элементами.
     *
     * @param n    количество элементов.
     * @param base массив элементов вектора.
     
end note
note left of ru.cs.vsu.cg.matrix.core.VectorWrapperC::getBase()

     * Получить массив элементов вектора.
     *
     * @return массив элементов.
     
end note
note right of ru.cs.vsu.cg.matrix.core.VectorWrapperC::getRows()

     * Получить количество строк в векторе.
     *
     * @return количество строк.
     
end note
note left of ru.cs.vsu.cg.matrix.core.VectorWrapperC::getCols()

     * Получить количество столбцов в векторе.
     *
     * @return количество столбцов (всегда 1 для вектора-столбца).
     
end note
note right of ru.cs.vsu.cg.matrix.core.VectorWrapperC::getVector()

     * Получить внутренний объект вектора-столбца.
     *
     * @return внутренний объект `VectorC`.
     
end note
note left of ru.cs.vsu.cg.matrix.core.VectorWrapperC::setVector(VectorC)

     * Задать внутренний объект вектора-столбца.
     *
     * @param vector объект `VectorC`.
     
end note
note right of ru.cs.vsu.cg.matrix.core.VectorWrapperC::get(int,int)

     * Получить элемент вектора по индексу.
     *
     * @param row индекс элемента.
     * @param col индекс столбца (всегда 0 для вектора-столбца).
     * @return значение элемента.
     
end note
note left of ru.cs.vsu.cg.matrix.core.VectorWrapperC::set(int,int,double)

     * Установить элемент вектора по индексу.
     *
     * @param row   индекс строки.
     * @param col   индекс столбца (всегда 0).
     * @param value новое значение.
     
end note
note right of ru.cs.vsu.cg.matrix.core.VectorWrapperC::newMatrix(VectorC)

     * Создать новый экземпляр конкретного вектора-столбца.
     *
     * @param vector внутренний объект `VectorC`.
     * @return новый экземпляр конкретного типа вектора.
     
end note
note left of ru.cs.vsu.cg.matrix.core.VectorWrapperC::add(T)

     * Сложить текущий вектор с другим.
     *
     * @param other вектор-столбец для сложения.
     
end note
note right of ru.cs.vsu.cg.matrix.core.VectorWrapperC::added(T)

     * Создать новый вектор как сумму текущего и другого.
     *
     * @param other вектор-столбец для сложения.
     * @return новый вектор-столбец.
     
end note
note left of ru.cs.vsu.cg.matrix.core.VectorWrapperC::subtract(T)

     * Вычесть другой вектор из текущего.
     *
     * @param other вектор-столбец для вычитания.
     
end note
note right of ru.cs.vsu.cg.matrix.core.VectorWrapperC::subtracted(T)

     * Создать новый вектор как разность текущего и другого.
     *
     * @param other вектор-столбец для вычитания.
     * @return новый вектор-столбец.
     
end note
note left of ru.cs.vsu.cg.matrix.core.VectorWrapperC::multiply(double)

     * Умножить текущий вектор на число.
     *
     * @param number множитель.
     
end note
note right of ru.cs.vsu.cg.matrix.core.VectorWrapperC::multiplied(double)

     * Создать новый вектор как результат умножения текущего на число.
     *
     * @param number множитель.
     * @return новый вектор-столбец.
     
end note
note left of ru.cs.vsu.cg.matrix.core.VectorWrapperC::divide(double)

     * Разделить текущий вектор на число.
     *
     * @param number делитель.
     
end note
note right of ru.cs.vsu.cg.matrix.core.VectorWrapperC::divided(double)

     * Создать новый вектор как результат деления текущего на число.
     *
     * @param number делитель.
     * @return новый вектор-столбец.
     
end note
note left of ru.cs.vsu.cg.matrix.core.VectorWrapperC::getLength()

     * Вычислить длину вектора.
     *
     * @return длина вектора.
     
end note
note right of ru.cs.vsu.cg.matrix.core.VectorWrapperC::normalize()

     * Нормализовать текущий вектор.
     *
     * @return новый нормализованный вектор-столбец.
     
end note
note left of ru.cs.vsu.cg.matrix.core.VectorWrapperC::crossProduct(T)

     * Вычислить векторное произведение текущего вектора с другим.
     *
     * @param other другой вектор-столбец.
     * @return новый вектор-столбец, являющийся результатом операции.
     
end note
note right of ru.cs.vsu.cg.matrix.core.VectorWrapperC::print()

     * Печать текущего вектора в консоль.
     
end note
note left of ru.cs.vsu.cg.matrix.core.VectorWrapperC::toString()

     * Представление текущего вектора в виде строки.
     *
     * @return строковое представление вектора.
     
end note

abstract class ru.cs.vsu.cg.matrix.core.MatrixWrapper {
~ SquareMatrix matrix
+ <<Create>> MatrixWrapper(int,double[])
+ <<Create>> MatrixWrapper(int,double[][])
+ <<Create>> MatrixWrapper(int)
+ <<Create>> MatrixWrapper(int,boolean)
+ double[] getBase()
+ int getRows()
+ int getCols()
# SquareMatrix getMatrix()
# void setMatrix(SquareMatrix)
+ double get(int,int)
+ void set(int,int,double)
+ void print()
# {abstract}T newMatrix(SquareMatrix)
+ void add(T)
+ T added(T)
+ void subtract(T)
+ T subtracted(T)
+ void multiply(double)
+ T multiplied(double)
+ void divide(double)
+ T divided(double)
+ String toString()
+ void transpose()
+ T transposed()
+ T pows(int)
+ void pow(int)
+ void multiply(T)
+ T multiplied(T)
+ E multiplied(E)
}
note top of ru.cs.vsu.cg.matrix.core.MatrixWrapper

 * Класс обертка для квадратных матриц заданного размера.
 *<p>
 * Этот класс предоставляет методы для выполнения различных операций над квадратными матрицами,
 * таких как сложение, вычитание, умножение, транспонирование и возведение в степень.
 * Абстрактный метод `newMatrix` позволяет создать новые экземпляры матрицы
 * через наследников, обеспечивая поддержку конкретных реализаций.
 *
 * @param <T> конкретный класс квадратной матрицы с заданным размером.
 * @param <E> конкретный класс вектора-столбца с заданным размером.
 
end note

note left of ru.cs.vsu.cg.matrix.core.MatrixWrapper::matrix

     * Квадратная матрица
     
end note

note left of ru.cs.vsu.cg.matrix.core.MatrixWrapper::MatrixWrapper(int,double[])

     * Конструктор квадратной матрицы из одномерного массива значений.
     *
     * @param n    количество строк и столбцов.
     * @param base одномерный массив, содержащий элементы матрицы.
     
end note
note right of ru.cs.vsu.cg.matrix.core.MatrixWrapper::MatrixWrapper(int,double[][])

     * Конструктор квадратной матрицы из двумерного массива значений.
     *
     * @param n    количество строк и столбцов.
     * @param base двумерный массив, содержащий элементы матрицы.
     
end note
note left of ru.cs.vsu.cg.matrix.core.MatrixWrapper::MatrixWrapper(int)

     * Конструктор для создания нулевой квадратной матрицы.
     *
     * @param n количество строк и столбцов.
     
end note
note right of ru.cs.vsu.cg.matrix.core.MatrixWrapper::MatrixWrapper(int,boolean)

     * Конструктор для создания единичной квадратной матрицы.
     *
     * @param n    количество строк и столбцов.
     * @param unit флаг, определяющий создание единичной матрицы (true) или нулевой (false).
     
end note
note left of ru.cs.vsu.cg.matrix.core.MatrixWrapper::getBase()

     * Получить значения матрицы
     * @return одномерный массив со всеми значениями матрицы
     
end note
note right of ru.cs.vsu.cg.matrix.core.MatrixWrapper::getRows()

     * Получить количество строк
     *
     * @return значение
     
end note
note left of ru.cs.vsu.cg.matrix.core.MatrixWrapper::getCols()

     * Получить количество столбцов
     *
     * @return значение
     
end note
note right of ru.cs.vsu.cg.matrix.core.MatrixWrapper::getMatrix()

     * Получит тело матрицы
     *
     * @return матрица - базовый объект
     
end note
note left of ru.cs.vsu.cg.matrix.core.MatrixWrapper::setMatrix(SquareMatrix)

     * Изменить тело матрицы
     
end note
note right of ru.cs.vsu.cg.matrix.core.MatrixWrapper::get(int,int)

     * Получить элементы по индексу
     *
     * @param row строка
     * @param col столбец
     * @return значение
     
end note
note left of ru.cs.vsu.cg.matrix.core.MatrixWrapper::set(int,int,double)

     * Изменить значение по индексу
     *
     * @param row   строка
     * @param col   столбец
     * @param value значение
     
end note
note right of ru.cs.vsu.cg.matrix.core.MatrixWrapper::print()

     * Вывод матрицы
     
end note
note left of ru.cs.vsu.cg.matrix.core.MatrixWrapper::newMatrix(SquareMatrix)

     * Вспомогательный метод
     * @param matrix квадратная матрица
     * @return матрицу с ограниченным значением
     
end note
note right of ru.cs.vsu.cg.matrix.core.MatrixWrapper::add(T)

     * Сложение матриц
     *
     * @param other слагаемое
     
end note
note left of ru.cs.vsu.cg.matrix.core.MatrixWrapper::added(T)

     * Сложение текущей матрицы с другой матрицей.
     *
     * @param other другая квадратная матрица.
     * @return новая матрица, содержащая результат сложения.
     
end note
note right of ru.cs.vsu.cg.matrix.core.MatrixWrapper::subtract(T)

     * Вычитание матриц
     *
     * @param other вычитаемое
     
end note
note left of ru.cs.vsu.cg.matrix.core.MatrixWrapper::subtracted(T)

     * Вычитание другой матрицы из текущей.
     *
     * @param other другая квадратная матрица.
     * @return новая матрица, содержащая результат вычитания.
     
end note
note right of ru.cs.vsu.cg.matrix.core.MatrixWrapper::multiply(double)

     * Умножение матрицы на число
     *
     * @param number множитель
     
end note
note left of ru.cs.vsu.cg.matrix.core.MatrixWrapper::multiplied(double)

     * Умножение текущей матрицы на число.
     *
     * @param number множитель.
     * @return новая матрица, содержащая результат умножения.
     
end note
note right of ru.cs.vsu.cg.matrix.core.MatrixWrapper::divide(double)

     * Деление матрицы на число
     *
     * @param number делитель
     
end note
note left of ru.cs.vsu.cg.matrix.core.MatrixWrapper::divided(double)

     * Деление матрицы на число
     *
     * @param number делитель
     * @return новая матрица - результат
     
end note
note right of ru.cs.vsu.cg.matrix.core.MatrixWrapper::toString()

     * Вывод в консоль объекта
     *
     * @return текст
     
end note
note left of ru.cs.vsu.cg.matrix.core.MatrixWrapper::transpose()

     * Транспонирование квадратной матрицы
     
end note
note right of ru.cs.vsu.cg.matrix.core.MatrixWrapper::transposed()

     * Транспонирование текущей матрицы.
     *
     * @return новая матрица, которая является транспонированной версией текущей.
     
end note
note left of ru.cs.vsu.cg.matrix.core.MatrixWrapper::pows(int)

     * Возведение матрицы в целую степень.
     *
     * @param n степень, в которую будет возведена матрица.
     * @return новая матрица, содержащая результат операции.
     
end note
note right of ru.cs.vsu.cg.matrix.core.MatrixWrapper::multiply(T)

     * Умножение квадратной матрицы
     *
     * @param matrix матрица-множитель
     
end note
note left of ru.cs.vsu.cg.matrix.core.MatrixWrapper::multiplied(T)

     * Умножение текущей матрицы на другую матрицу.
     *
     * @param matrix матрица-множитель.
     * @return новая матрица, содержащая результат умножения.
     
end note
note right of ru.cs.vsu.cg.matrix.core.MatrixWrapper::multiplied(E)

     * Умножение квадратной матрицы на вектор-столбец
     *
     * @param vector вектор-множитель
     * @return вектор-столбец
     
end note

class ru.cs.vsu.cg.matrix.types.VectorC {
+ <<Create>> VectorC(int)
+ <<Create>> VectorC(int,double[])
# <<Create>> VectorC(Matrix)
+ RecMatrix multiplied(VectorR)
+ VectorC normalize()
+ double getLength()
+ VectorC crossProduct(VectorC)
- void validateColumnVector(int)
# VectorC newMatrix(Matrix)
}
note top of ru.cs.vsu.cg.matrix.types.VectorC

 * Класс для работы с векторами-столбцами.
 * <p>
 * Вектор-столбец — это матрица размером N×1. Этот класс предоставляет методы нормализации,
 * вычисления длины и операций с другими векторами.
 
end note

note left of ru.cs.vsu.cg.matrix.types.VectorC::VectorC(int)

     * Создает нулевой вектор-столбец заданной длины.
     *
     * @param n количество элементов (длина вектора).
     
end note
note right of ru.cs.vsu.cg.matrix.types.VectorC::VectorC(int,double[])

     * Создает вектор-столбец с элементами из одномерного массива.
     *
     * @param n    количество элементов (длина вектора).
     * @param base массив элементов вектора.
     
end note
note left of ru.cs.vsu.cg.matrix.types.VectorC::VectorC(Matrix)

     * Создает вектор-столбец на основе общей матрицы.
     *
     * @param matrix базовая матрица.
     * @throws IllegalArgumentException если базовая матрица не имеет 1 столбец.
     
end note
note right of ru.cs.vsu.cg.matrix.types.VectorC::multiplied(VectorR)

     * Умножение текущего вектора-столбца на вектор-строку.
     *
     * @param vector вектор-строка (VectorR).
     * @return результат умножения в виде прямоугольной матрицы.
     
end note
note left of ru.cs.vsu.cg.matrix.types.VectorC::normalize()

     * Нормализация вектора (приведение длины к единице).
     *
     * @return нормализованный вектор-столбец.
     
end note
note right of ru.cs.vsu.cg.matrix.types.VectorC::getLength()

     * Вычисление длины (нормы) вектора.
     *
     * @return длина вектора.
     
end note
note left of ru.cs.vsu.cg.matrix.types.VectorC::crossProduct(VectorC)

     * Векторное произведение текущего вектора с другим вектором-столбцом.
     *
     * @param vector другой вектор-столбец.
     * @return результат в виде нового вектора-столбца.
     * @throws IllegalArgumentException если размеры векторов не соответствуют для операции.
     
end note
note right of ru.cs.vsu.cg.matrix.types.VectorC::validateColumnVector(int)

     * Проверяет, что матрица является вектором-столбцом.
     *
     * @param col количество столбцов.
     * @throws IllegalArgumentException если количество столбцов не равно 1.
     
end note
note left of ru.cs.vsu.cg.matrix.types.VectorC::newMatrix(Matrix)

     * Создает новый вектор-столбец на основе базовой матрицы.
     *
     * @param matrix базовая матрица.
     * @return новый вектор-столбец.
     
end note

class ru.cs.vsu.cg.matrix.typesVectors.Vector2C {
+ <<Create>> Vector2C()
+ <<Create>> Vector2C(double[])
+ Vector2C newMatrix(VectorC)
}
note top of ru.cs.vsu.cg.matrix.typesVectors.Vector2C

 * Вектор размерности 2 (двумерный).
 * <p>
 * Этот класс представляет собой вектор-столбец с двумя элементами. Он расширяет базовый функционал класса VectorWrapperC.
 
end note

note left of ru.cs.vsu.cg.matrix.typesVectors.Vector2C::Vector2C()

     * Конструктор для создания нулевого вектора размерности 2.
     
end note
note right of ru.cs.vsu.cg.matrix.typesVectors.Vector2C::Vector2C(double[])

     * Конструктор для создания вектора размерности 2 с заданными значениями.
     *
     * @param base массив значений, представляющий элементы вектора.
     
end note
note left of ru.cs.vsu.cg.matrix.typesVectors.Vector2C::newMatrix(VectorC)

     * Создаёт новый вектор-столбец Vector2C на основе другого вектора VectorC.
     *
     * @param vector вектор, на основе которого будет создан новый.
     * @return новый вектор размерности 2.
     
end note

class ru.cs.vsu.cg.matrix.typesVectors.Vector3C {
+ <<Create>> Vector3C()
+ <<Create>> Vector3C(double[])
+ Vector3C newMatrix(VectorC)
}
note top of ru.cs.vsu.cg.matrix.typesVectors.Vector3C

 * Вектор размерности 3 (трехмерный).
 * <p>
 * Этот класс представляет собой вектор-столбец с тремя элементами. Он расширяет базовый функционал класса VectorWrapperC.
 
end note

note left of ru.cs.vsu.cg.matrix.typesVectors.Vector3C::Vector3C()

     * Конструктор для создания нулевого вектора размерности 3.
     * <p>
     * Инициализирует вектор размерностью 3 с нулевыми значениями.
     
end note
note right of ru.cs.vsu.cg.matrix.typesVectors.Vector3C::Vector3C(double[])

     * Конструктор для создания вектора размерности 3 с заданными значениями.
     * <p>
     * Инициализирует вектор размерностью 3 с элементами, переданными в массиве.
     *
     * @param base массив значений, представляющий элементы вектора.
     
end note
note left of ru.cs.vsu.cg.matrix.typesVectors.Vector3C::newMatrix(VectorC)

     * Вспомогательный метод для создания нового объекта Vector3C.
     * <p>
     * Этот метод используется для создания нового вектора размерности 3 на основе другого вектора VectorC.
     *
     * @param vector вектор, на основе которого будет создан новый.
     * @return новый вектор размерности 3.
     
end note

class ru.cs.vsu.cg.matrix.Main {
+ {static} void main(String[])
}
note top of ru.cs.vsu.cg.matrix.Main

 * Некоторые примеры использования библиотеки
 
end note


abstract class ru.cs.vsu.cg.matrix.core.AbstractMatrix {
# Matrix matrix
+ <<Create>> AbstractMatrix(int,int)
+ <<Create>> AbstractMatrix(int,int,double[])
+ <<Create>> AbstractMatrix(int,int,double[][])
+ <<Create>> AbstractMatrix(int,int,boolean)
+ double[] getBase()
+ int getRows()
+ int getCols()
# Matrix getMatrix()
# void setMatrix(Matrix)
+ double get(int,int)
+ void set(int,int,double)
+ void print()
# {abstract}T newMatrix(Matrix)
+ void add(T)
+ T added(T)
+ void subtract(T)
+ T subtracted(T)
+ void multiply(double)
+ T multiplied(double)
+ void divide(double)
+ T divided(double)
+ String toString()
+ boolean equals(Object)
+ int hashCode()
}
note top of ru.cs.vsu.cg.matrix.core.AbstractMatrix

 * Класс обертка для основных типов ->Прямоугольная, Квадратная, Вектор-строка, Вектор-столбец
 *
 * @param <T>
 
end note

note left of ru.cs.vsu.cg.matrix.core.AbstractMatrix::matrix

     * Основной объект, содержащий реализацию логики работы с матрицами.
     
end note

note left of ru.cs.vsu.cg.matrix.core.AbstractMatrix::AbstractMatrix(int,int)

     * Базовый абстрактный класс для работы с матрицами различных типов
     * (прямоугольная, квадратная, вектор-строка, вектор-столбец).
     * <p></p>
     * Конструкторы позволяют создавать матрицы различных типов: нулевые, единичные,
     * с использованием одномерных и двумерных массивов.
     *
     * @param row количество строк.
     * @param col количество столбцов.
     * @throws IllegalArgumentException если количество строк или столбцов меньше 1.
     
end note
note right of ru.cs.vsu.cg.matrix.core.AbstractMatrix::AbstractMatrix(int,int,double[])

     * Конструктор абстрактной матрицы
     *
     * @param row  строки
     * @param col  столбцы
     * @param base одномерный массив - тело матрицы
     
end note
note left of ru.cs.vsu.cg.matrix.core.AbstractMatrix::AbstractMatrix(int,int,double[][])

     * Конструктор абстрактной матрицы
     *
     * @param row  строки
     * @param col  столбцы
     * @param base двумерный массив - тело матрицы
     
end note
note right of ru.cs.vsu.cg.matrix.core.AbstractMatrix::AbstractMatrix(int,int,boolean)

     * Конструктор единичной матрицы
     *
     * @param row  строки
     * @param col  столбцы
     * @param unit flag
     
end note
note left of ru.cs.vsu.cg.matrix.core.AbstractMatrix::getBase()

     * Значения матрицы в виде одномерного массива
     *
     * @return одномерный массив значений матрицы
     
end note
note right of ru.cs.vsu.cg.matrix.core.AbstractMatrix::getRows()

     * Получить количество строк
     *
     * @return значение
     
end note
note left of ru.cs.vsu.cg.matrix.core.AbstractMatrix::getCols()

     * Получить количество столбцов
     *
     * @return значение
     
end note
note right of ru.cs.vsu.cg.matrix.core.AbstractMatrix::getMatrix()

     * Получит тело матрицы
     *
     * @return матрица - базовый объект
     
end note
note left of ru.cs.vsu.cg.matrix.core.AbstractMatrix::setMatrix(Matrix)

     * Изменить тело матрицы
     
end note
note right of ru.cs.vsu.cg.matrix.core.AbstractMatrix::get(int,int)

     * Получить элементы по индексу
     *
     * @param row строка
     * @param col столбец
     * @return значение
     
end note
note left of ru.cs.vsu.cg.matrix.core.AbstractMatrix::set(int,int,double)

     * Изменить значение по индексу
     *
     * @param row   строка
     * @param col   столбец
     * @param value значение
     
end note
note right of ru.cs.vsu.cg.matrix.core.AbstractMatrix::print()

     * Вывод матрицы
     
end note
note left of ru.cs.vsu.cg.matrix.core.AbstractMatrix::newMatrix(Matrix)

     * Метод -> вспомогательный
     *
     * @param matrix основная матрица
     * @return конкретный объект матрицу
     
end note
note right of ru.cs.vsu.cg.matrix.core.AbstractMatrix::add(T)

     * Сложение матриц
     *
     * @param other слагаемое
     
end note
note left of ru.cs.vsu.cg.matrix.core.AbstractMatrix::added(T)

     * Сложение матриц
     *
     * @param other слагаемое
     * @return новая матрица - результат
     
end note
note right of ru.cs.vsu.cg.matrix.core.AbstractMatrix::subtract(T)

     * Вычитание матриц
     *
     * @param other вычитаемое
     
end note
note left of ru.cs.vsu.cg.matrix.core.AbstractMatrix::subtracted(T)

     * Вычитание матриц
     *
     * @param other вычитаемое
     * @return новая матрица - результат
     
end note
note right of ru.cs.vsu.cg.matrix.core.AbstractMatrix::multiply(double)

     * Умножение матрицы на число
     *
     * @param number множитель
     
end note
note left of ru.cs.vsu.cg.matrix.core.AbstractMatrix::multiplied(double)

     * Умножение матрицы на число
     *
     * @param number множитель
     * @return новая матрица - результат
     
end note
note right of ru.cs.vsu.cg.matrix.core.AbstractMatrix::divide(double)

     * Деление матрицы на число
     *
     * @param number делитель
     
end note
note left of ru.cs.vsu.cg.matrix.core.AbstractMatrix::divided(double)

     * Деление матрицы на число
     *
     * @param number делитель
     * @return новая матрица - результат
     
end note
note right of ru.cs.vsu.cg.matrix.core.AbstractMatrix::toString()

     * Вывод в консоль объекта
     *
     * @return текст
     
end note
note left of ru.cs.vsu.cg.matrix.core.AbstractMatrix::equals(Object)

     * Сравнение матриц
     *
     * @param o с кем сравниваем
     * @return true or false
     
end note

class ru.cs.vsu.cg.matrix.core.AbstractMatrix$Matrix {
- int rows
- int cols
- double[] base
+ <<Create>> Matrix(int,int,double[])
+ <<Create>> Matrix(int,int,double[][])
+ <<Create>> Matrix(int,int)
+ <<Create>> Matrix(int,int,boolean)
+ void initialize(int,int,double[])
+ boolean equals(Object)
+ int hashCode()
+ String toString()
+ double get(int,int)
+ void set(int,int,double)
- void validateIndex(int,int)
+ int getRows()
+ int getCols()
+ double[] getBase()
- void setRows(int)
- void setCols(int)
- void setBase(double[])
+ void print()
+ Matrix transposed()
+ Matrix multiplied(Matrix)
+ Matrix multiplied(double)
+ Matrix added(Matrix)
+ Matrix subtracted(Matrix)
+ Matrix divided(double)
+ Matrix createUnitMatrix()
- {static} double[] unwrap(double[][])
+ Matrix pows(int)
+ double getLength()
+ Matrix crossProduct(Matrix)
+ Matrix normalize()
}
note top of ru.cs.vsu.cg.matrix.core.AbstractMatrix$Matrix

     * Вложенный класс для реализации базовой логики работы с матрицами.
     * Обеспечивает основные операции, такие как сложение, умножение, транспонирование,
     * а также вспомогательные функции (нормализация, возведение в степень и др.).
     * <p>Матрица хранится в виде одномерного массива для оптимизации операций
     * с памятью и вычислений.</p>
     
end note

note left of ru.cs.vsu.cg.matrix.core.AbstractMatrix$Matrix::rows

         * Строки
         
end note
note right of ru.cs.vsu.cg.matrix.core.AbstractMatrix$Matrix::cols

         * Столбцы
         
end note
note left of ru.cs.vsu.cg.matrix.core.AbstractMatrix$Matrix::base

         * Значения в матрице
         
end note

note left of ru.cs.vsu.cg.matrix.core.AbstractMatrix$Matrix::Matrix(int,int,double[])

         * Основной конструктор Матрицы N*M
         *
         * @param rows количество строк
         * @param cols количество столбцов
         * @param base тело матрицы
         
end note
note right of ru.cs.vsu.cg.matrix.core.AbstractMatrix$Matrix::Matrix(int,int,double[][])

         * Основной конструктор Матрицы N*M
         *
         * @param rows количество строк
         * @param cols количество столбцов
         * @param base тело матрицы (двумерный массив)
         
end note
note left of ru.cs.vsu.cg.matrix.core.AbstractMatrix$Matrix::Matrix(int,int)

         * Конструктор нулевой матрицы
         *
         * @param rows количество строк
         * @param cols количество столбцов
         
end note
note right of ru.cs.vsu.cg.matrix.core.AbstractMatrix$Matrix::Matrix(int,int,boolean)

         * Конструктор единичной матрицы
         *
         * @param rows количество строк
         * @param cols количество столбцов
         
end note
note left of ru.cs.vsu.cg.matrix.core.AbstractMatrix$Matrix::initialize(int,int,double[])

         * Метод инициализации параметров матрицы
         *
         * @param rows строки
         * @param cols столбцы
         * @param base значения
         
end note
note right of ru.cs.vsu.cg.matrix.core.AbstractMatrix$Matrix::hashCode()

         * HASH-код
         *
         * @return значение
         
end note
note left of ru.cs.vsu.cg.matrix.core.AbstractMatrix$Matrix::toString()

         * Красивый вывод матрицы
         *
         * @return Текст
         
end note
note right of ru.cs.vsu.cg.matrix.core.AbstractMatrix$Matrix::get(int,int)

         * Получение элемента матрицы по индексам
         *
         * @param row строка
         * @param col столбец
         * @return значение
         
end note
note left of ru.cs.vsu.cg.matrix.core.AbstractMatrix$Matrix::validateIndex(int,int)

         * Метод проверки корректности индексов
         *
         * @param row строка
         * @param col столбец
         
end note
note right of ru.cs.vsu.cg.matrix.core.AbstractMatrix$Matrix::getRows()

         * Получить количество строк для данной матрицы
         *
         * @return количество строк [>0]
         
end note
note left of ru.cs.vsu.cg.matrix.core.AbstractMatrix$Matrix::getCols()

         * Получить количество столбцов для данной матрицы
         *
         * @return количество столбцов [>0]
         
end note
note right of ru.cs.vsu.cg.matrix.core.AbstractMatrix$Matrix::getBase()

         * Получить тело матрицы
         *
         * @return double[] тело матрицы
         
end note
note left of ru.cs.vsu.cg.matrix.core.AbstractMatrix$Matrix::setRows(int)

         * Установить значение строк в матрице
         *
         * @param rows количество строк [>0]
         
end note
note right of ru.cs.vsu.cg.matrix.core.AbstractMatrix$Matrix::setCols(int)

         * Установить значение столбцов в матрице
         *
         * @param cols количество столбцов [>0]
         
end note
note left of ru.cs.vsu.cg.matrix.core.AbstractMatrix$Matrix::setBase(double[])

         * Изменение тела матрицы (новый массив)
         *
         * @param base новый массив
         
end note
note right of ru.cs.vsu.cg.matrix.core.AbstractMatrix$Matrix::print()

         * Вывод матрицы в консоль в виде <p>
         * <p>[A11, A12,<p>
         * A21, A22]
         
end note
note left of ru.cs.vsu.cg.matrix.core.AbstractMatrix$Matrix::transposed()

         * Метод для транспонирования матрицы
         *
         * @return транспонированная матрица
         
end note
note right of ru.cs.vsu.cg.matrix.core.AbstractMatrix$Matrix::multiplied(Matrix)

         * Умножение текущей матрицы на другую матрицу.
         *
         * @param matrix матрица-множитель.
         *               Количество столбцов текущей матрицы должно быть равно
         *               количеству строк матрицы-множителя.
         * @return новая матрица, являющаяся результатом умножения.
         * @throws IllegalArgumentException если размеры матриц не соответствуют
         *                                  условию умножения.
         *                                  <p>
         *                                  Пример:
         *                                  <pre>{@code
         *                                                                                                                                                                                                                                                                                                          Matrix m1 = new Matrix(2, 3, new double[] {1, 2, 3, 4, 5, 6});
         *                                                                                                                                                                                                                                                                                                          Matrix m2 = new Matrix(3, 2, new double[] {7, 8, 9, 10, 11, 12});
         *                                                                                                                                                                                                                                                                                                          Matrix result = m1.multiplied(m2);
         *                                                                                                                                                                                                                                                                                                          }</pre>
         
end note
note left of ru.cs.vsu.cg.matrix.core.AbstractMatrix$Matrix::multiplied(double)

         * Умножение матрицы на число
         *
         * @param number множитель
         * @return результат умножения - матрица
         
end note
note right of ru.cs.vsu.cg.matrix.core.AbstractMatrix$Matrix::added(Matrix)

         * Сложение матриц
         *
         * @param matrix слагаемое
         * @return результат сложения
         
end note
note left of ru.cs.vsu.cg.matrix.core.AbstractMatrix$Matrix::subtracted(Matrix)

         * Вычитание матриц
         *
         * @param matrix вычитаемое
         * @return результат вычитания - матрица
         
end note
note right of ru.cs.vsu.cg.matrix.core.AbstractMatrix$Matrix::divided(double)

         * Деление матрицы на число
         *
         * @param number делитель
         * @return результат матрица
         
end note
note left of ru.cs.vsu.cg.matrix.core.AbstractMatrix$Matrix::createUnitMatrix()

         * Создание единичной матрицы на основе текущей
         *
         * @return единичная матрица
         
end note
note right of ru.cs.vsu.cg.matrix.core.AbstractMatrix$Matrix::unwrap(double[][])

         * Приватный метод для преобразования двумерного массива в одномерный
         *
         * @param base двумерный массив
         * @return одномерный массив
         
end note
note left of ru.cs.vsu.cg.matrix.core.AbstractMatrix$Matrix::pows(int)

         * Возведение квадратной матрицы в степень.
         * Использует алгоритм быстрого возведения в степень.
         *
         * @param n степень, в которую нужно возвести матрицу.
         *          Должна быть неотрицательной.
         * @return матрица, возведённая в степень.
         * @throws IllegalArgumentException если степень отрицательная.
         * @throws IllegalArgumentException если матрица не является квадратной.
         *                                  <p></p>
         *                                  Пример:
         *                                  <pre>{@code
         *                                                                                                                                                                                                       Matrix m = new Matrix(2, 2, new double[] {2, 0, 0, 2});
         *                                                                                                                                                                                                       Matrix result = m.pows(3); // Результат: [8, 0; 0, 8]
         *                                                                                                                                                                                                       }</pre>
         
end note
note right of ru.cs.vsu.cg.matrix.core.AbstractMatrix$Matrix::getLength()

         * Метод вычисления длинны вектора
         *
         * @return число
         
end note
note left of ru.cs.vsu.cg.matrix.core.AbstractMatrix$Matrix::normalize()

         * Нормализация вектора (приведение к единичной длине).
         * Доступно только для векторов.
         *
         * @return нормализованный вектор.
         * @throws ArithmeticException если вектор является нулевым (длина равна 0).
         
end note

class ru.cs.vsu.cg.matrix.core.MatrixUtils {
+ {static} double dotProduct(T,T,double)
+ {static} T add(T)
+ {static} T multiplied(T)
}
note top of ru.cs.vsu.cg.matrix.core.MatrixUtils

 * Класс MatrixUtils предоставляет методы для работы с векторами и матрицами.
 * Методы реализуют операции, такие как скалярное произведение векторов, сложение векторов и умножение матриц.
 
end note

note left of ru.cs.vsu.cg.matrix.core.MatrixUtils::dotProduct(T,T,double)

     * Вычисляет скалярное произведение двух векторов на основе их длин и угла между ними.
     *
     * @param v1    Первый вектор (объект, реализующий интерфейс VectorWrapperC).
     * @param v2    Второй вектор (объект, реализующий интерфейс VectorWrapperC).
     * @param angle Угол между векторами в радианах.
     * @param <T>   Тип вектора, должен быть подклассом VectorWrapperC.
     * @return Скалярное произведение двух векторов.
     
end note
note right of ru.cs.vsu.cg.matrix.core.MatrixUtils::add(T)

     * Складывает несколько векторов и возвращает результирующий вектор.
     * Вектор, переданный первым, будет модифицирован, чтобы содержать сумму всех векторов.
     *
     * @param vectors Массив векторов для сложения.
     * @param <T>     Тип вектора, должен быть подклассом VectorWrapperC.
     * @return Результат сложения всех векторов.
     
end note
note left of ru.cs.vsu.cg.matrix.core.MatrixUtils::multiplied(T)

     * Выполняет последовательное умножение нескольких матриц.
     * Матрица, переданная первой, будет модифицирована, чтобы содержать результат умножения всех матриц.
     *
     * @param matrix Массив матриц для умножения.
     * @param <T>    Тип матрицы, должен быть подклассом MatrixWrapper.
     * @return Результат умножения всех матриц.
     
end note

class ru.cs.vsu.cg.matrix.types.VectorR {
+ <<Create>> VectorR(int)
+ <<Create>> VectorR(int,double[])
# <<Create>> VectorR(Matrix)
+ VectorR multiplied(SquareMatrix)
+ VectorR multiplied(RecMatrix)
+ double multiplied(VectorC)
+ VectorR normalize()
+ double getLength()
- void validateRowVector(int)
# VectorR newMatrix(Matrix)
}
note top of ru.cs.vsu.cg.matrix.types.VectorR

 * Класс для работы с векторами-строками.
 * <p>
 * Вектор-строка — это матрица размером 1×N. Этот класс предоставляет методы нормализации,
 * вычисления длины, скалярного произведения и операций с матрицами.
 
end note

note left of ru.cs.vsu.cg.matrix.types.VectorR::VectorR(int)

     * Создает нулевой вектор-строку заданной длины.
     *
     * @param n количество элементов (длина вектора).
     
end note
note right of ru.cs.vsu.cg.matrix.types.VectorR::VectorR(int,double[])

     * Создает вектор-строку с элементами из одномерного массива.
     *
     * @param n    количество элементов (длина вектора).
     * @param base массив элементов вектора.
     
end note
note left of ru.cs.vsu.cg.matrix.types.VectorR::VectorR(Matrix)

     * Создает вектор-строку на основе общей матрицы.
     *
     * @param matrix базовая матрица.
     * @throws IllegalArgumentException если базовая матрица не является вектором-строкой.
     
end note
note right of ru.cs.vsu.cg.matrix.types.VectorR::multiplied(SquareMatrix)

     * Умножение текущего вектора-строки на квадратную матрицу.
     *
     * @param matrix квадратная матрица.
     * @return результат умножения в виде нового вектора-строки.
     
end note
note left of ru.cs.vsu.cg.matrix.types.VectorR::multiplied(RecMatrix)

     * Умножение текущего вектора-строки на прямоугольную матрицу.
     *
     * @param matrix прямоугольная матрица.
     * @return результат умножения в виде нового вектора-строки.
     
end note
note right of ru.cs.vsu.cg.matrix.types.VectorR::multiplied(VectorC)

     * Скалярное произведение текущего вектора-строки и вектора-столбца.
     *
     * @param vector вектор-столбец.
     * @return результат умножения (скаляр).
     
end note
note left of ru.cs.vsu.cg.matrix.types.VectorR::normalize()

     * Нормализация вектора-строки (приведение длины к единице).
     *
     * @return нормализованный вектор-строка.
     
end note
note right of ru.cs.vsu.cg.matrix.types.VectorR::getLength()

     * Вычисление длины (нормы) вектора-строки.
     *
     * @return длина вектора.
     
end note
note left of ru.cs.vsu.cg.matrix.types.VectorR::validateRowVector(int)

     * Проверяет, что матрица является вектором-строкой.
     *
     * @param row количество строк.
     * @throws IllegalArgumentException если количество строк не равно 1.
     
end note
note right of ru.cs.vsu.cg.matrix.types.VectorR::newMatrix(Matrix)

     * Создает новый вектор-строку на основе базовой матрицы.
     *
     * @param matrix базовая матрица.
     * @return новый вектор-строка.
     
end note

class ru.cs.vsu.cg.matrix.typesMatrix.Matrix4D {
+ <<Create>> Matrix4D(double[][])
+ <<Create>> Matrix4D(double[])
+ <<Create>> Matrix4D()
+ <<Create>> Matrix4D(boolean)
# Matrix4D newMatrix(SquareMatrix)
}
note top of ru.cs.vsu.cg.matrix.typesMatrix.Matrix4D

 * Класс для работы с матрицами размером 4x4.
 * <p>
 * Этот класс представляет собой матрицу размером 4x4. Он предоставляет методы для создания и работы с такими матрицами,
 * а также для выполнения различных операций над ними.
 
end note

note left of ru.cs.vsu.cg.matrix.typesMatrix.Matrix4D::Matrix4D(double[][])

     * Конструктор для создания матрицы 4x4 из двумерного массива.
     *
     * @param base двумерный массив, представляющий значения матрицы 4x4.
     
end note
note right of ru.cs.vsu.cg.matrix.typesMatrix.Matrix4D::Matrix4D(double[])

     * Конструктор для создания матрицы 4x4 из одномерного массива.
     *
     * @param base одномерный массив, представляющий значения матрицы 4x4.
     
end note
note left of ru.cs.vsu.cg.matrix.typesMatrix.Matrix4D::Matrix4D()

     * Конструктор для создания нулевой матрицы 4x4.
     
end note
note right of ru.cs.vsu.cg.matrix.typesMatrix.Matrix4D::Matrix4D(boolean)

     * Конструктор для создания единичной матрицы 4x4.
     *
     * @param unit если true, создаётся единичная матрица, если false — нулевая.
     
end note
note left of ru.cs.vsu.cg.matrix.typesMatrix.Matrix4D::newMatrix(SquareMatrix)

     * Метод для создания нового объекта Matrix4D на основе SquareMatrix.
     *
     * @param matrix квадратная матрица.
     * @return новый объект Matrix4D.
     
end note

class ru.cs.vsu.cg.matrix.typesVectors.Vector4C {
+ <<Create>> Vector4C()
+ <<Create>> Vector4C(double[])
+ Vector4C newMatrix(VectorC)
}
note top of ru.cs.vsu.cg.matrix.typesVectors.Vector4C

 * Вектор размерности 4 (четырехмерный).
 * <p>
 * Этот класс представляет собой вектор-столбец с четырьмя элементами. Он расширяет базовый функционал класса VectorWrapperC.
 
end note

note left of ru.cs.vsu.cg.matrix.typesVectors.Vector4C::Vector4C()

     * Конструктор для создания нулевого вектора размерности 4.
     * <p>
     * Инициализирует вектор размерностью 4 с нулевыми значениями.
     
end note
note right of ru.cs.vsu.cg.matrix.typesVectors.Vector4C::Vector4C(double[])

     * Конструктор для создания вектора размерности 4 с заданными значениями.
     * <p>
     * Инициализирует вектор размерностью 4 с элементами, переданными в массиве.
     *
     * @param base массив значений, представляющий элементы вектора.
     
end note
note left of ru.cs.vsu.cg.matrix.typesVectors.Vector4C::newMatrix(VectorC)

     * Вспомогательный метод для создания нового объекта Vector4C.
     * <p>
     * Этот метод используется для создания нового вектора размерности 4 на основе другого вектора VectorC.
     *
     * @param vector вектор, на основе которого будет создан новый.
     * @return новый вектор размерности 4.
     
end note

class ru.cs.vsu.cg.matrix.typesMatrix.Matrix3D {
+ <<Create>> Matrix3D(double[][])
+ <<Create>> Matrix3D(double[])
+ <<Create>> Matrix3D()
+ <<Create>> Matrix3D(boolean)
# Matrix3D newMatrix(SquareMatrix)
}
note top of ru.cs.vsu.cg.matrix.typesMatrix.Matrix3D

 * Класс для работы с матрицами размером 3x3.
 * <p>
 * Этот класс представляет собой матрицу размером 3x3. Он позволяет создавать матрицы с различными типами данных,
 * а также предоставляет методы для работы с ними.
 
end note

note left of ru.cs.vsu.cg.matrix.typesMatrix.Matrix3D::Matrix3D(double[][])

     * Конструктор для создания матрицы 3x3 из двумерного массива.
     *
     * @param base двумерный массив, представляющий значения матрицы 3x3.
     
end note
note right of ru.cs.vsu.cg.matrix.typesMatrix.Matrix3D::Matrix3D(double[])

     * Конструктор для создания матрицы 3x3 из одномерного массива.
     *
     * @param base одномерный массив, представляющий значения матрицы 3x3.
     
end note
note left of ru.cs.vsu.cg.matrix.typesMatrix.Matrix3D::Matrix3D()

     * Конструктор для создания нулевой матрицы 3x3.
     
end note
note right of ru.cs.vsu.cg.matrix.typesMatrix.Matrix3D::Matrix3D(boolean)

     * Конструктор для создания единичной матрицы 3x3.
     *
     * @param unit если true, создаётся единичная матрица, если false — нулевая.
     
end note
note left of ru.cs.vsu.cg.matrix.typesMatrix.Matrix3D::newMatrix(SquareMatrix)

     * Метод для создания нового объекта Matrix3D на основе SquareMatrix.
     *
     * @param matrix квадратная матрица.
     * @return новый объект Matrix3D.
     
end note



ru.cs.vsu.cg.matrix.core.MatrixWrapper <|-- ru.cs.vsu.cg.matrix.typesMatrix.Matrix2D
ru.cs.vsu.cg.matrix.core.AbstractMatrix <|-- ru.cs.vsu.cg.matrix.types.SquareMatrix
ru.cs.vsu.cg.matrix.core.AbstractMatrix <|-- ru.cs.vsu.cg.matrix.types.RecMatrix
ru.cs.vsu.cg.matrix.core.AbstractMatrix <|-- ru.cs.vsu.cg.matrix.types.VectorC
ru.cs.vsu.cg.matrix.core.VectorWrapperC <|-- ru.cs.vsu.cg.matrix.typesVectors.Vector2C
ru.cs.vsu.cg.matrix.core.VectorWrapperC <|-- ru.cs.vsu.cg.matrix.typesVectors.Vector3C
ru.cs.vsu.cg.matrix.core.AbstractMatrix +.. ru.cs.vsu.cg.matrix.core.AbstractMatrix$Matrix
ru.cs.vsu.cg.matrix.core.AbstractMatrix <|-- ru.cs.vsu.cg.matrix.types.VectorR
ru.cs.vsu.cg.matrix.core.MatrixWrapper <|-- ru.cs.vsu.cg.matrix.typesMatrix.Matrix4D
ru.cs.vsu.cg.matrix.core.VectorWrapperC <|-- ru.cs.vsu.cg.matrix.typesVectors.Vector4C
ru.cs.vsu.cg.matrix.core.MatrixWrapper <|-- ru.cs.vsu.cg.matrix.typesMatrix.Matrix3D
@enduml